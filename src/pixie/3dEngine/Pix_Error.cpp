#include "StdAfx.h"

#include "Pix_Error.h"

std::string Pixie_GetErrorCodeText(HRESULT Result)
{
	switch(Result)
	{
	case D3D_OK: return "D3D_OK";
	case D3DERR_WRONGTEXTUREFORMAT: return "D3DERR_WRONGTEXTUREFORMAT";
	case D3DERR_UNSUPPORTEDCOLOROPERATION: return "D3DERR_UNSUPPORTEDCOLOROPERATION";
	case D3DERR_UNSUPPORTEDCOLORARG: return "D3DERR_UNSUPPORTEDCOLORARG";
	case D3DERR_UNSUPPORTEDALPHAOPERATION: return "D3DERR_UNSUPPORTEDALPHAOPERATION";
	case D3DERR_UNSUPPORTEDALPHAARG: return "D3DERR_UNSUPPORTEDALPHAARG";
	case D3DERR_TOOMANYOPERATIONS: return "D3DERR_TOOMANYOPERATIONS";
	case D3DERR_CONFLICTINGTEXTUREFILTER: return "D3DERR_CONFLICTINGTEXTUREFILTER";
	case D3DERR_UNSUPPORTEDFACTORVALUE: return "D3DERR_UNSUPPORTEDFACTORVALUE";
	case D3DERR_CONFLICTINGRENDERSTATE: return "D3DERR_CONFLICTINGRENDERSTATE";
	case D3DERR_UNSUPPORTEDTEXTUREFILTER: return "D3DERR_UNSUPPORTEDTEXTUREFILTER";
	case D3DERR_CONFLICTINGTEXTUREPALETTE: return "D3DERR_CONFLICTINGTEXTUREPALETTE";
	case D3DERR_DRIVERINTERNALERROR: return "D3DERR_DRIVERINTERNALERROR";
	case D3DERR_NOTFOUND: return "D3DERR_NOTFOUND";
	case D3DERR_MOREDATA: return "D3DERR_MOREDATA";
	case D3DERR_DEVICELOST: return "D3DERR_DEVICELOST";
	case D3DERR_DEVICENOTRESET: return "D3DERR_DEVICENOTRESET";
	case D3DERR_NOTAVAILABLE: return "D3DERR_NOTAVAILABLE";
	case D3DERR_OUTOFVIDEOMEMORY: return "D3DERR_OUTOFVIDEOMEMORY";
	case D3DERR_INVALIDDEVICE: return "D3DERR_INVALIDDEVICE";
	case D3DERR_INVALIDCALL: return "D3DERR_INVALIDCALL";
	case D3DERR_DRIVERINVALIDCALL: return "D3DERR_DRIVERINVALIDCALL";
	case D3DERR_WASSTILLDRAWING: return "D3DERR_WASSTILLDRAWING";
	case D3DOK_NOAUTOGEN: return "D3DOK_NOAUTOGEN";
	case D3DXERR_INVALIDDATA: return "D3DXERR_INVALIDDATA";
	case E_OUTOFMEMORY: return "E_OUTOFMEMORY";
	}
	return fmt::sprintf("Unknown error code (0x%08x)",Result);
}